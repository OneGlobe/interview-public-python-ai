# This file is a template for creating secrets in Kubernetes
# DO NOT commit actual secrets to version control
#
# To create secrets, use the following commands after running terraform apply:
#
# 1. Get the terraform outputs:
#    terraform -chdir=infrastructure output -json > /tmp/tf-outputs.json
#
# 2. Create the secrets in Kubernetes:
#
#    kubectl create secret generic postgres-credentials \
#      --from-literal=username=$(terraform -chdir=infrastructure output -raw postgres_admin_username) \
#      --from-literal=password=$(terraform -chdir=infrastructure output -raw postgres_admin_password) \
#      --from-literal=host=$(terraform -chdir=infrastructure output -raw postgres_host) \
#      --from-literal=database=$(terraform -chdir=infrastructure output -raw postgres_database_name) \
#      -n chatapp
#
#    kubectl create secret generic openai-credentials \
#      --from-literal=endpoint=$(terraform -chdir=infrastructure output -raw openai_endpoint) \
#      --from-literal=api-key=$(terraform -chdir=infrastructure output -raw openai_api_key) \
#      --from-literal=deployment-name=$(terraform -chdir=infrastructure output -raw openai_deployment_name) \
#      -n chatapp
#
#    kubectl create secret docker-registry acr-credentials \
#      --docker-server=$(terraform -chdir=infrastructure output -raw acr_login_server) \
#      --docker-username=$(terraform -chdir=infrastructure output -raw acr_admin_username) \
#      --docker-password=$(terraform -chdir=infrastructure output -raw acr_admin_password) \
#      -n chatapp
#
# Or use the provided script: ./infrastructure/scripts/create-k8s-secrets.sh

---
# Example of secret structure (DO NOT use in production with actual values)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: postgres-credentials
#   namespace: chatapp
# type: Opaque
# stringData:
#   username: pgadmin
#   password: REPLACE_WITH_ACTUAL_PASSWORD
#   host: chatapp-dev-psql.postgres.database.azure.com
#   database: chat_db
